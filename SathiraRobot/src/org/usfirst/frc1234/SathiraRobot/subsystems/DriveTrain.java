// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1234.SathiraRobot.subsystems;

import org.usfirst.frc1234.SathiraRobot.RobotMap;
import org.usfirst.frc1234.SathiraRobot.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftFront = RobotMap.driveTrainLeftFront;
    SpeedController leftRear = RobotMap.driveTrainLeftRear;
    SpeedController rightFront = RobotMap.driveTrainRightFront;
    SpeedController rightRear = RobotMap.driveTrainRightRear;
    RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
    AnalogInput ultrasonic = RobotMap.driveTrainUltrasonic;
    Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    Encoder rightEncoder = RobotMap.driveTrainRightEncoder;
    Gyro gyro = RobotMap.driveTrainGyro;

    
    public DriveTrain(){
    	super();
    	leftEncoder.setDistancePerPulse((4.0/12.0*Math.PI)/360.0);
    	rightEncoder.setDistancePerPulse((4.0/12.0*Math.PI)/360.0);
    	
    	LiveWindow.addSensor("Drive Train","Left Encoder",leftEncoder);
    	LiveWindow.addSensor("Drive Train","Right Encoder",leftEncoder);
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new TankDriveWithJoystick());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void tankDrive(Joystick stick){
    	robotDrive41.tankDrive(-0.5*stick.getRawAxis(1),-0.5*stick.getRawAxis(4));
    }
    public void drive(double left, double right){
    	robotDrive41.tankDrive(left,right);
    }
    public void driveCurve(double outputMagnitude, double curve){
    	robotDrive41.drive(outputMagnitude, curve);
    }
    public double getHeading(){
    	return gyro.getAngle();
    }
    public void reset(){
    	gyro.reset();
    	leftEncoder.reset();
    	rightEncoder.reset();
    }
    public double getDistance(){
    	return (leftEncoder.getDistance()+rightEncoder.getDistance())/2;
    }
    public double getDistanceToObstacle(){
    	return ultrasonic.getAverageVoltage();
    }
    public void resetAngle(){
    	gyro.reset();
    }
}

